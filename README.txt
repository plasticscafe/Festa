#########################################
# simple web application framework Festa 
#########################################

"Festa"はnode.jsの勉強を兼ねて開発を進めている
超シンプルWebアプリケーションフレームワークです。

絶賛開発中のため遅々として機能が増えていく様子を生暖かく見守るのが吉です。

########################################
# ＊一番簡単な使い方＊
########################################
# 1:アプリケーションファイルの作成

# Festaの呼び出し 
var festa = require('festa')

# URLルーティングの定義
festa.route('/path/:val1/', function(c){
  return c.render('Hello Node val1:' + c.args['val1'])
})

# Festaアプリの実行
festa.run()

########################################
# 2: アプリケーションの実行

$ node web.js

# アクセス先 (default port 5000)
http://localhost:5000/

########################################
# ＊ドキュメント的な覚書＊
# 羅列なので後でまとめ直すメモ
########################################
# 1:URLルーティングの定義

# routeメソッドに対象のurlpathと処理するメソッドを渡します。
# (「:value」で変数を定義することができます)

# 下の例だと http://<domain>/path/12/ のようなURLにマッチします。
festa.route('/path/:val1/', function(c){
  # c.renderで描画する文字列を返します。
  # URL定義の変数にはc.args[<value>]のようにアクセスします。
  return c.render('Hello Node val1:' + c.args['val1'])
})

########################################
# 2:GET POSTパラメータへのアクセス

# GET, POSTの区別はせずにc.paramsでアクセスが可能です。
c.params[<key>]

########################################
# 3:before afterメソッドの定義

# URLに対応したメソッドの前後に定型的な処理を実行することができます。
# メソッド実行前に行いたい処理はbeforeで、実行後に行う処理はafterで定義します。

# 前処理の定義
festa.before(function(c){
  festa.log('before1 call')
})

# 後処理の定義
festa.after(function(c){
  festa.log('after1 call')
})

# 前処理、後処理は複数定義することが可能です。
########################################
# 4:ログの出力

# 下記のようにすることでログを出力可能です。
# なお、ログレベルは省略可能で省略時は3になります。
festa.log('メッセージ', <loglevel>)

# ログはfesta.log.levelで設定されたログレベル以上のものが出力されます
# fetsa.log.levelのデフォルト値は3で、下記のように変更することができます。

festa.log.level = 5

########################################
# 5:デバッグモード

# 下記のようにすることでデバッグモードにすることが可能です。
# （デバッグモードの詳細は決まっていません><）
festa.debug = true 

########################################
# 6:実行ポートの変更

# デフォルトのポート番号は5000ですが
# 実行時に下記のように指定することで変更できます。

festa.run(<port>)

########################################
# 7:その他

最新の実装はexamples/web.jsで試しているので、そちらをご参照ください

########################################
# ＊TODO＊
# 　と言う名の試してみたい実装項目
########################################
# 思いついたら追加しつつ後でまとめ直す羅列 

- runメソッドで渡す変数を整理
- urlパーサーの効率化
- exportsとthisの使い分けをきっちりする
- text/html以外のContent-typeを返すモード
-- json, xml... 後何がいる?
- 404, 403等に応じてレスポンスヘッダーを変更
-- httpエラーメソッド
-- レスポンスコードに応じてテンプレートを変更 
- festaの各メソッドをまとめ直す
- エスケープ処理
- デバッグモードで何するかを定義
- ログレベルを文字列で定数化(WARNINGとかERRORとか)
- テスト機構を追加
- MongoDBとの接続(ORM風味？)
- Templateエンジン(Jinja2風？) 
